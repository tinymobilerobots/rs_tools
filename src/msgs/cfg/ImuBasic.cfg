#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator,  double_t, int_t, bool_t, str_t

gen = ParameterGenerator()

output_freq_method = gen.enum([
                        gen.const("200",      int_t, 200, "Hz"),
                        gen.const("100",      int_t, 100, "Hz"),
                        gen.const("50",       int_t, 50, "Hz"),
                        gen.const("40",       int_t, 40, "Hz"),
                        gen.const("25",       int_t, 25, "Hz"),
                        gen.const("20",       int_t, 20, "Hz"),
                        gen.const("10",       int_t, 10, "Hz"),
                        gen.const("5",        int_t, 5, "Hz"),
                        gen.const("4",        int_t, 4, "Hz"),
                        gen.const("2",        int_t, 2, "Hz"),
                        gen.const("1",        int_t, 1, "Hz"),],
                      "An enum to set Output frequency, when using UART MAX = 200")

gen.add("user_tag", str_t, 1, "A user specified tag, can be set in the IMU","Unknown")

ImuOutput = gen.add_group("ImuOutput")
ImuOutput.add("enable",        bool_t,  0,  "Enables/Disables IMU data being read", True)
ImuOutput.add("output_freq",   int_t, 4,  "Sets output frequency at which IMU data is read",100,1,200, edit_method=output_freq_method)
ImuOutput.add("frame_id",      str_t,   0,  "imu data header ",  "base_link")
ImuOutput.add("publish_mag_data",      bool_t,   10,  "Enables/Disables magnetometer data being published",  False)

ReferenceFrame = gen.add_group("ReferenceFrame")

ReferenceFrame.add("ref_frame_rot0",   str_t,   3, "Transform matrix that allows for the IMU measurements to be compensated in reference to this matrix.", "0,0,0")
ReferenceFrame.add("ref_frame_rot1",   str_t,   3, "Transform matrix that allows for the IMU measurements to be compensated in reference to this matrix.", "0,0,0")
ReferenceFrame.add("ref_frame_rot2",   str_t,   3, "Transform matrix that allows for the IMU measurements to be compensated in reference to this matrix.", "0,0,0")


Hsi = gen.add_group("Hsi")

Hsi.add("hsi_convergerate",     int_t,      6,  "How quickly the solution is allowed to converge onto a new solution. 1 slowest, 5 fastest.", 1,  1, 5)
Hsi.add("hsi_run",              bool_t,     6,  "Enable/Disable the HSI alorithm",  False)
Hsi.add("hsi_use_on_board",       bool_t,     6,  "Applies/removes the HSI to/from the magnetic measurments", False)

Hsi.add("hsi_reset",            bool_t,     5,  "Resets HSI algorithm",     False)

Hsi.add("hsi_c_field0",   str_t,   0, "Shows the calculated magnetometer calibration (Read only).",  "0, 0, 0")
Hsi.add("hsi_c_field1",   str_t,   0, "Shows the calculated magnetometer calibration (Read only).",  "0, 0, 0")
Hsi.add("hsi_c_field2",   str_t,   0, "Shows the calculated magnetometer calibration (Read only).",  "0, 0, 0")
Hsi.add("hsi_b_field",    str_t,   0, "Shows the calculated magnetometer calibration (Read only).",  "0, 0, 0")

UpdateImu = gen.add_group("UpdateImu")

UpdateImu.add("read_settings", bool_t,  0,  "Reads all settings", True)
UpdateImu.add("flash_settings_and_soft_reset",      bool_t,      7,   "Flashes the current settigns ON the VN100 to non-volatile memory", False)
UpdateImu.add("factory_reset",                      bool_t,      8,   "Hard Reset of IMU", False)
UpdateImu.add("set_tmr_settings",                   bool_t,      9,   "Sets predefined settings to IMU", False)

Covariance = gen.add_group("Covariance")

Covariance.add("orientation_cov_x",      double_t,    2, "Orientation covariance X", 0.2,  0, 6.29)
Covariance.add("orientation_cov_y",      double_t,    2, "Orientation covariance Y", 0.2,  0, 6.29)
Covariance.add("orientation_cov_z",      double_t,    2, "Orientation covariance Z", 0.2,  0, 6.29)
Covariance.add("gyroscope_cov_x",        double_t,    2, "Angular velocity covariance X", 0.0001,  0, 1)
Covariance.add("gyroscope_cov_y",        double_t,    2, "Angular velocity covariance Y", 0.0001,  0, 1)
Covariance.add("gyroscope_cov_z",        double_t,    2, "Angular velocity covariance Z", 0.0001,  0, 1)
Covariance.add("accelerometer_cov_x",    double_t,    2, "Linear acceleration covariance X", 0.002,  0, 1)
Covariance.add("accelerometer_cov_y",    double_t,    2, "Linear acceleration covariance Y", 0.002,  0, 1)
Covariance.add("accelerometer_cov_z",    double_t,    2, "Linear acceleration covariance Z", 0.002,  0, 1)

ProcessImu = gen.add_group("ProcessIMU")

ProcessImu.add("angular_vel_world_frame",   bool_t, 0, "", False)
ProcessImu.add("remove_gravity",             bool_t, 0, "", True)
ProcessImu.add("remove_angular_acceleration", bool_t, 0, "", False)

exit(gen.generate("msgs", "msgs", "ImuBasic"))
